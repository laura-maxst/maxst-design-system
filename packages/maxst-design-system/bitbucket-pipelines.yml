# need to define
# $AWS_ACCESS_KEY_ID
# $AWS_SECRET_ACCESS_KEY
# $AWS_DEFAULT_REGION
# $AWS_ECR_URI
# $CD_DIR_NAME
definitions:
  steps:
    - step: &semantic-versioning-step
        name: Semantic Versioning
        script:
          - git fetch --unshallow || true
          - docker pull gittools/gitversion:$GITTOOL_VERSION
          - docker run --rm -v "$(pwd):/repo" gittools/gitversion:$GITTOOL_VERSION /repo -output json -showvariable MajorMinorPatch > version.txt
          - echo "$(cat version.txt).$(TZ=Asia/Seoul date +%Y%m%d)" > version.txt
        caches:
          - docker
        services:
          - docker
        artifacts:
          - version.txt
    - step: &nodejs-build-step
        name: nodejs build
        image: node:16.20.0
        caches:
          - node
        script:
          - if [ $BITBUCKET_BRANCH == "master" ]; then export NPM_BUILD_ENV='prod'; else export NPM_BUILD_ENV='dev'; fi
          - npm install
          - npm run build-storybook
        artifacts:
          - storybook-static/**
    - step: &docker-build-and-ecr-push-step
        name: docker image build and push to ecr
        services:
          - docker
        image: atlassian/pipelines-awscli
        caches:
          - docker
        script:
          - export IMAGE="$AWS_ECR_URI"
          - export TAG="$(cat version.txt)-$BITBUCKET_BUILD_NUMBER-$BITBUCKET_BRANCH"
          - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          - eval $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION | sed 's;https://;;g')
          - docker build -t $IMAGE:$TAG .
          - docker push $IMAGE:$TAG
    - step: &git-version-tagging-step
        name: Git Version Tagging
        script:
          - export TAG="$(cat version.txt)-$BITBUCKET_BUILD_NUMBER-$BITBUCKET_BRANCH"
          - git tag $TAG
          - git tag
          - git push origin $TAG
    - step: &deploy-through-argocd
        name: Update image tag in cd-pipeline's yaml. This will trigger the Argo CD.
        deployment: alpha
        image: atlassian/default-image:4
        script:
          - if [ $BITBUCKET_BRANCH == "master" ]; then export CD_BRANCH='beta'; else export CD_BRANCH='alpha'; fi
          - export TAG="$(cat version.txt)-$BITBUCKET_BUILD_NUMBER-$BITBUCKET_BRANCH"
          - git clone -b ${CD_BRANCH} --single-branch --depth 1 git@bitbucket.org:maxstcorp/maxverse-cd-pipeline.git
          - cd ./maxverse-cd-pipeline/${CD_BRANCH}/${CD_DIR_NAME}
          - sed -i "s/tag:.*/tag\:\ ${TAG}/" values.yaml
          - git config --global user.email "commits-noreply@bitbucket.org"
          - git config --global user.name "bitbucket-pipelines"
          - git add .
          - git commit -m "release ${CD_DIR_NAME} ${TAG}" --allow-empty
          - git pull origin ${CD_BRANCH} --ff-only
          - git push
image: atlassian/default-image:3
pipelines:
  branches:
    'develop':
      - step: *semantic-versioning-step
      - step: *nodejs-build-step
      - step: *docker-build-and-ecr-push-step
      - step: *git-version-tagging-step
      - step:
          <<: *deploy-through-argocd
          deployment: Staging
    'master':
      - step: *semantic-versioning-step
      - step: *nodejs-build-step
      - step: *docker-build-and-ecr-push-step
      - step: *git-version-tagging-step
      - step:
          <<: *deploy-through-argocd
          deployment: Production