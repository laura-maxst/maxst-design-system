// button 공통 속성 
@mixin button-common {
  // border-radius: 4px;
  white-space: nowrap;
  max-width: 330px !important;
  span{
    width: 100%;
    display: block;
    color: inherit;
    @include ellipsis(1);
  }
}
// button background color 설정 
@mixin setBackgroundColor ($type, $state){
  @if ($state =='pressed'){
    @if($type == 'ghost'){
      background-color: semantic-color('background', '2nd-base');
    }
    @else{
      background-color: semantic-color('background', 'ui-base');
      background-color: semantic-color('background', '#{$type}-accent');
    }
  }@else{
    background-color: semantic-color('background', $type);
  }
  @if($state == 'disabled'){
    background-color: semantic-color('background', 'disabled');
  }
}

@mixin action-common{
  background-size: 51% 100%;
	background-repeat: no-repeat;
}

@mixin primary-action($state) {
  // background: linear-gradient(-45deg, transparent 10px, semantic-color('background', 'primary') 0) right, linear-gradient(135deg, transparent 10px, semantic-color('background', 'primary') 0) left;
  @include action-common;
  background-color: semantic-color('background', 'primary');
  clip-path: polygon(0% 14px, 14px 0%, 100% 0%, 100% calc(100% - 14px), calc(100% - 14px) 100%, 0% 100%);

  &:hover, &:focus, &:active{
    // background: linear-gradient(-45deg, transparent 10px, semantic-color('background', 'primary-accent') 0) right, linear-gradient(135deg, transparent 10px, semantic-color('background', 'primary-accent') 0) left;
    background-color: semantic-color('background', 'primary-accent');
    @include action-common;
  } 

  @if($state == 'disabled'){
    // background: linear-gradient(-45deg, transparent 10px, semantic-color('background', 'disabled') 0) right, linear-gradient(135deg, transparent 10px, semantic-color('background', 'disabled') 0) left ;
    background-color: semantic-color('background', 'disabled');
    @include action-common;

    &:hover, &:focus, &:active{
      // background: linear-gradient(-45deg, transparent 10px, semantic-color('background', 'disabled') 0) right, linear-gradient(135deg, transparent 10px, semantic-color('background', 'disabled') 0) left;
      background-color: semantic-color('background', 'disabled');
      @include action-common;
    }
  }
}
// button font, fill, border color 설정 
@mixin setColorStyle($type,$state){
  @if($type == 'tertiary'){
    @if ($state =='pressed'){
      border: 1px solid semantic-color('border', 'accent');
    }@else{
      border: 1px solid semantic-color('border', 'default');
    }
    color: semantic-color('text', 'default');
    & svg{
      fill:  semantic-color('text', 'default');
    }
  }@else if($type == 'error-tertiary'){
    @if ($state =='pressed'){
      border: 1px solid semantic-color('border', 'error-accent');
    }@else{
      border: 1px solid semantic-color('border', 'error');
    }
    color: semantic-color('text', 'error');
    & svg{
      fill: semantic-color('text', 'error');
    }
  }@else if($type == 'ghost'){
    color: semantic-color('text', 'default');
    & svg{
      fill:  semantic-color('text', 'default');
    }
  }@else{
    color: semantic-color('text', 'default-reverse');
    & svg{
      fill: semantic-color('text', 'default-reverse');
    }
  }
  // disabled 
  @if($state == 'disabled'){
    color: semantic-color('text', 'disabled');
    & svg{
      fill: semantic-color('text', 'disabled');
    }
    @if($type == 'text' or $type == 'link'){
      background: none;
    }@else if($type == 'tertiary' or $type == 'error-tertiary'){
      border: 1px solid semantic-color('border', 'disabled');
    }
  } 
}
// size 
%size-xl {
  min-width: 120px;
  height:48px;
  padding: 0 16px;
}
%size-l{
  min-width: 100px;
  height:40px;
  padding: 0 16px;
}
%size-m{
  min-width: 80px;
  height:36px;
  padding: 0 12px;
}
%size-s{
  min-width: 70px;
  height:32px;
  padding: 0 12px;
}
%size-xs{
  min-width: 60px;
  height:28px;
  padding: 0 8px;
}

// text type
%type-text-default{
  color: semantic-color('text', 'sub');
  & svg{
    fill: semantic-color('text', 'sub');
  }
}
%type-text-pressed{
  color: semantic-color('text', 'default');
  & svg{
    fill: semantic-color('text', 'default');
  }
}
%type-text-error{
  color:semantic-color('text', 'error');
  & svg{
    fill: semantic-color('text', 'error');
  }
}
%type-link-default{ 
  color: semantic-color('text', 'information');
  & svg{
    fill: semantic-color('text', 'information');
  }
}
%type-link-pressed{
  position: relative; 
  color: semantic-color('text', 'information');

  &::after{
    content:'';
    display: block;
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 1px;
    background-color: semantic-color('text', 'information');;
  }
  & svg{
    fill: semantic-color('text', 'information');
  }
}

// box button, text button 
$buttonType: 'primary', 'secondary', 'tertiary','error', 'error-tertiary', 'text', 'link', 'ghost';
$buttonSize: 'xl', 'l', 'm', 's', 'xs'; 
$buttonState: 'default', 'pressed', 'disabled', 'error';

@mixin buttonCase($type, $size, $state){
  .button__#{$type}-#{$size}--#{$state}{
    @include button-common;

    @if($type == 'link'){
      @if($state == 'default'){
        @extend %type-#{$type}-#{$state};
      }@else if($state == 'pressed'){
        @extend %type-#{$type}-#{$state};
      }
    }@else if($type == 'text'){
      @if($state != 'disabled'){
        @extend %type-#{$type}-#{$state};
      }
    }
    @else{
      @include setBackgroundColor($type, $state);
      @include setColorStyle($type,$state); 
      @extend %size-#{$size};
    }
    @if($state == 'disabled'){
      cursor: default;
    }

    &.icon-button{
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 2px;
      
      & img, & svg {
        display: block;
        flex:none;

        @if($size == 'xl' or $size == 'l'){
          width:24px;
          height:24px;
        }@else if($size == 'm' or $size == 's'){
          width:20px;
          height:20px;
        }@else if($size == 'xs'){
          width:16px;
          height:16px;
        }
      }
    }

    &:hover, &:focus{
      @if($state != 'disabled') {
        @if($type == 'link'){
          @if($state == 'default' or $state == 'pressed'){
            @extend %type-#{$type}-#{'pressed'};
          }
        }@else if($type == 'text'){
          @if($state != 'disabled'){
            @extend %type-#{$type}-#{'pressed'};
          }
        }
        @else{
          @include setBackgroundColor($type, 'pressed');
          @include setColorStyle($type, 'pressed'); 
        }
      }
    }
    
    @if($size == 'xl' and $type == 'primary'){
      &.primary-action{
        @include primary-action($state);
      }
    }
  }
}


// icon button 
$iconButtonType: 'primary', 'secondary', 'tertiary','error', 'error-tertiary','ghost' ;
$iconButtonSize: 'xl', 'l', 'm', 's', 'xs'; 
$iconButtonState: 'default', 'pressed', 'disabled', 'error';


@mixin iconButtonCase($type, $size, $state){
  .button__icon-#{$type}-#{$size}--#{$state}{
    @include button-common;
    @include setColorStyle($type,$state); 

    display: flex;
    justify-content: center;
    align-items: center;
    gap: 4px;

    @include setBackgroundColor($type, $state); 


    &.icon-button{
      & img, & svg  {
        display: block;

        @if($size == 'xl' or $size == 'l'){
          width:24px;
          height:24px;
        }@else if($size == 'm' or $size == 's'){
          width:20px;
          height:20px;
        }@else if($size == 'xs'){
          width:16px;
          height:20px;
        }
      }

      &-only{
        min-width: auto;

        & img, & svg  {
          display: block;
        }
        
        @if($size == 'xl'){
          width:48px;
          height:48px;
          padding:10px;

          & img, & svg  {
            width:24px;
          }
        }@else if($size == 'l'){
          width:40px;
          height:40px;
          padding:6px;

          & img, & svg  {
            width:24px;
          }
        }@else if($size == 'm'){
          width:36px;
          height:36px;
          padding:8px;

          & img, & svg  {
            width:20px;
          }
        }@else if($size == 's'){
          width:32px;
          height:32px;
          padding:6px;

          & img, & svg  {
            width:20px;
          }
        } @else if($size == 'xs'){
          width:28px;
          height:28px;
          padding:4px;

          & img, & svg  {
            width:16px;
          }
        }
      }
      
      &:hover, &:focus{
        @if($state != 'disabled') {
          @include setBackgroundColor($type, 'pressed');
          @include setColorStyle($type, 'pressed'); 
        }
      }
    }
  }
}

@each $type in $buttonType {
  @each $size in $buttonSize{
    @each $state in $buttonState{
      @include buttonCase($type, $size, $state);
    }
  }
}

@each $type in $iconButtonType {
  @each $size in $iconButtonSize{
    @each $state in $iconButtonState{
      @include iconButtonCase($type, $size, $state);
    }
  }
}

.button__group{
  display: flex;
  justify-content: flex-start;
  align-items: center;
  gap:8px;
  width:100%;

  &.fullWidth{
    button {
      flex-grow: 1;
      width: 100%;
    }
  }
  
  &.left{
    justify-content: flex-start;
  }

  &.center{
    justify-content: center;
  }
  
  &.right{
    justify-content: flex-end;
  }

  &.vertical {
    flex-direction: column;
  }

  &.horizontal{
    flex-direction: row;
  }

  @include media-mobile-m{
    button {
      width: 100%;
    }
  }
}