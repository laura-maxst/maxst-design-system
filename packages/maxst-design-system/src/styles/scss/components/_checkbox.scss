.checkbox__group {
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  width: 100%;
  flex-wrap: wrap;
  flex-direction: row;
  gap: 16px;

  .checkbox-box {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    width: 100%;
    flex-wrap: wrap;
    flex-direction: row;
    gap: 16px;
  }

  .checkbox__all-check__label {
    width: 100%;
  }

  &.left {
    justify-content: flex-start;
  }

  &.right {
    justify-content: flex-end;

    .checkbox-box,
    .checkbox-label {
      justify-content: flex-end;
    }

    & + .helper-text {
      text-align: right;
    }
  }

  &.vertical {
    flex-direction: column;
    gap: 4px;

    .checkbox-box {
      flex-direction: column;
      width: max-content;
    }

    .checkbox__all-check__label {
      .checkbox-wrap {
        margin-left: 0;
      }
    }

    &.right {
      align-items: flex-end;

      .checkbox-label {
        justify-content: flex-start;
      }
    }
  }

  &.horizontal {
    flex-direction: row;
    gap: 4px;

    .checkbox-box {
      flex-direction: row;
      gap: 16px;
    }
  }

  @include helper-text-with-icon;
}

// checkbox background, border color setting
@mixin checkboxColorSet($type, $color) {
  @if ($type == 'background') {
    background-color: semantic-color('background', $color);
  } @else if($type == 'border') {
    border-color: semantic-color('border', $color);
  }
}

$checkboxSize: 'l', 's';
$checkboxState: 'default', 'pressed', 'disabled', 'error';
$checkboxMode: 'primary', 'secondary';

@mixin stateDisabled {
  &,
  &:hover,
  &:active,
  &:focus {
    &::after {
      @include checkboxColorSet('border', 'disabled');
      @include checkboxColorSet('background', 'disabled');
    }
  }
  & + p {
    color: semantic-color('text', 'disabled');
  }

  &.checked {
    svg {
      color: semantic-color('text', 'disabled') !important;
    }
    &,
    &:hover,
    &:active,
    &:focus {
      &::after {
        @include checkboxColorSet('background', 'disabled');
      }
    }
  }
}

@mixin checkboxCase($size, $state, $mode) {
  .checkbox__#{$size}--#{$state}__#{$mode} {
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;

    svg {
      color: semantic-color('text', 'default-reverse') !important;
      z-index: 111;
    }

    &::after {
      position: absolute;
      content: '';
      display: block;
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      border: 1px solid;
      @include checkboxColorSet('border', 'default');
      z-index: 11;

      // interaction
      transition-property: background;
      transition-duration: 0.7s, 0.7s;
    }

    @if ($size == 'l') {
      width: 24px;
      height: 24px;

      svg {
        width: 18px;
        height: 18px;
      }
    } @else if($size == 's') {
      width: 18px;
      height: 18px;

      svg {
        width: 16px;
        height: 16px;
      }
    }

    &:hover,
    &:active,
    &:focus {
      &::after {
        @include checkboxColorSet('border', 'accent');
      }
    }

    @if ($state == 'pressed') {
      &::after {
        @include checkboxColorSet('border', 'accent');
      }
    } @else if($state == 'disabled') {
      @include stateDisabled;
    } @else if($state == 'error') {
      &::after {
        @include checkboxColorSet('border', 'error');
      }

      &:hover,
      &:active,
      &:focus {
        &::after {
          @include checkboxColorSet('border', 'error-accent');
        }
      }
    }

    &.checked {
      &::after {
        border: 0 none;
      }

      @if ($mode == 'primary') {
        &::after {
          @include checkboxColorSet('background', 'primary');
        }
        &:hover,
        &:active,
        &:focus {
          &::after {
            @include checkboxColorSet('background', 'primary-accent');
          }
        }
      } @else if($mode == 'secondary') {
        &::after {
          @include checkboxColorSet('background', 'secondary');
        }
        &:hover,
        &:active,
        &:focus {
          &::after {
            @include checkboxColorSet('background', 'secondary-accent');
          }
        }
      }

      @if ($state == 'pressed') {
        @if ($mode == 'primary') {
          &::after {
            @include checkboxColorSet('background', 'primary-accent');
          }
        } @else if($mode == 'secondary') {
          &::after {
            @include checkboxColorSet('background', 'secondary-accent');
          }
        }
      } @else if($state == 'disabled') {
        @include stateDisabled;
      } @else if($state == 'error') {
        &::after {
          @include checkboxColorSet('background', 'error');
        }

        &:hover,
        &:active,
        &:focus {
          &::after {
            @include checkboxColorSet('background', 'error-accent');
          }
        }
      }
    }
  }
}

.checkbox-wrap {
  @include helper-text-with-icon;

  .helper-text.font-body {
    padding-top: 4px;
  }

  .checkbox {
    position: relative;

    // checkbox touch area
    &::before {
      position: absolute;
      content: '';
      display: block;
      width: calc(100% + 16px);
      height: calc(100% + 16px);
      z-index: 0;
    }

    input {
      width: 0px;
      height: 0px;
    }
  }

  .on {
    .checkbox::before {
      transform: scale(0);
      animation: ripple-animation 0.6s linear;
      background-color: rgba(255, 255, 255, 0.8);
      background-color: semantic-color('background', 'secondary');
      pointer-events: none;
      width: calc(100% + 16px);
      height: calc(100% + 16px);
      opacity: 0.5;
    }
  }
  @include rippleAnimation;
}

.checkbox-label {
  position: relative;
  display: flex;
  width: fit-content;
  align-items: center;
  color: semantic-color('text', 'default');
  cursor: pointer;

  .checkbox {
    margin-right: 8px;
    color: semantic-color('text', 'default');
    flex: none;

    input {
      position: absolute;
      top: 0;
      left: 0;
      width: 0px;
      height: 0px;
    }
  }
  p {
    word-break: break-all;
  }
}

@mixin checkboxIconCase($size) {
  .checkbox-icon {
    cursor: pointer;

    svg {
      color: semantic-color('text', 'default');
    }

    &.checked {
      svg {
        color: semantic-color('text', 'primary');
      }
    }
    &.disabled {
      svg {
        color: semantic-color('text', 'disabled');
      }
    }

    &:hover,
    &:focus,
    &:active {
      background-color: semantic-color('background', '2nd-base');
    }

    &.checkbox__#{$size} {
      display: block;

      @if ($size == 'l') {
        width: 40px;
        height: 40px;
        padding: 8px;

        svg {
          width: 24px;
          height: 24px;
        }
      } @else if($size == 's') {
        width: 32px;
        height: 32px;
        padding: 6px;

        svg {
          width: 20px;
          height: 20px;
        }
      }
    }
  }
}
@each $size in $checkboxSize {
  @include checkboxIconCase($size);

  @each $state in $checkboxState {
    @each $mode in $checkboxMode {
      @include checkboxCase($size, $state, $mode);
    }
  }
}
