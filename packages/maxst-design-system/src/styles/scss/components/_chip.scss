.mds-chip {
  display: inline-flex;
  width: auto;
  max-width: 330px;
  align-items: center;
  gap: 4px;

  p,
  span,
  .left-icon svg {
    color: inherit;
  }

  &.filter,
  &.check {
    cursor: pointer;
  }
}

.mds-chip-group {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;

  .mds-chip {
    span {
      @include ellipsis;
    }
  }
}

@mixin setChipSize($size) {
  @if ($size == 's') {
    min-height: 24px;
    padding: 0 8px;
    border-radius: 12px;

    svg {
      width: 16px;
      height: 16px;
    }

    img {
      width: 18px;
      height: 18px;
    }

    .left-icon {
      img {
        margin-left: -2px;
      }
    }
  } @else {
    min-height: 32px;
    padding: 0 12px;
    border-radius: 16px;

    svg {
      width: 20px;
      height: 20px;
    }

    img {
      width: 24px;
      height: 24px;
    }

    .left-icon {
      img {
        margin-left: -6px;
      }
    }
  }
}

$chipType: 'default', 'tertiary', 'color-mint', 'color-bluegray',
  'color-magenta', 'color-purple', 'color-blue';
$chipSize: 'l', 's';
$chipState: 'default', 'pressed', 'disabled';
$chipColors: 'bluegray', 'mint', 'magenta', 'purple', 'blue';

@mixin setColors($type) {
  &:not(.check.checked) {
    svg {
      color: semantic-color('text', 'subtlest');
    }
  }

  @if ($type == 'tertiary') {
    color: semantic-color('text', 'sub');
    border: 1px solid semantic-color('border', 'default');
    background-color: semantic-color('background', 'tertiary');

    &.check.checked {
      svg {
        color: semantic-color('text', 'primary');
      }
    }
  } @else if($type == 'default') {
    color: semantic-color('text', 'default-reverse');
    background-color: semantic-color('background', 'secondary');

    &.check.checked {
      svg {
        color: semantic-color('text', 'primary');
      }
    }
  } @else if ($type == 'color-bluegray') {
    color: colors('palette-bluegray-700');
    background-color: colors('palette-bluegray-100');
  } @else {
    @each $color in $chipColors {
      @if ($type == 'color-#{$color}') {
        color: colors('palette-#{$color}-900');
        background-color: colors('palette-#{$color}-100');
      }
    }
  }
}

@mixin setPressed($type) {
  &:not(.check.checked) {
    svg {
      color: inherit !important;
    }
  }

  @if ($type == 'tertiary') {
    border: 1px solid semantic-color('border', 'accent');
  } @else if($type == 'default') {
    background-color: semantic-color('background', 'secondary-accent');
  } @else {
    @each $color in $chipColors {
      @if ($type == 'color-#{$color}') {
        background-color: colors('palette-#{$color}-300');
      }
    }
  }
}

@mixin chipCase($type, $size, $state) {
  .chip-#{$type}-#{$size}-#{$state} {
    @include setColors($type);
    @include setChipSize($size);

    @if ($state == 'disabled') {
      color: semantic-color('text', 'disabled');
      border: 0 none;
      background-color: semantic-color('background', 'disabled');

      &.checked {
        border: 1px solid semantic-color('border', 'disabled');
      }
    } @else if ($state == 'pressed') {
      @include setPressed($type);
    }
    .left-icon {
      font-size: 0;

      svg {
        color: inherit !important;
      }
    }

    &.filter,
    &.check {
      &:hover,
      &:focus,
      &:active {
        @include setPressed($type);
      }
    }
  }
}

@each $type in $chipType {
  @each $size in $chipSize {
    @each $state in $chipState {
      @include chipCase($type, $size, $state);
    }
  }
}

@include media-mobile-s {
  .mds-chip {
    max-width: 100%;
  }
}
