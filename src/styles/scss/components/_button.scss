.mds-button-root {
  .button__group button,
  button {
    padding: 0;
    margin: 0;
  }
}
// button 공통 속성
@mixin button-common {
  overflow: hidden;
  max-width: 330px !important;
  border-radius: 0;
  border: 0 none;
  border-radius: 2px;
  vertical-align: middle;
  font-family: 'Pretendard', sans-serif;
  font-size: 100%;
  white-space: nowrap;
  background: transparent;
  cursor: pointer;

  span,
  svg {
    pointer-events: none;
  }

  &:focus-visible {
    outline: 1px solid semantic-color('border', 'accent');
  }

  span:not(.ripple) {
    width: 100%;
    display: block;
    color: inherit;
    @include ellipsis(1);
  }
  span:not(.ripple),
  svg {
    position: relative;
    z-index: 9;
  }
}
// button background color 설정
@mixin setBackgroundColor($type, $state) {
  @if ($state == 'pressed') {
    @if ($type == 'ghost') {
      background-color: semantic-color('background', '2nd-base');
    } @else {
      background-color: semantic-color('background', '#{$type}-accent');
    }
  } @else {
    background-color: semantic-color('background', $type);
  }
  @if ($state == 'disabled') {
    cursor: unset;

    @if ($type == 'ghost') {
      background-color: transparent;
    } @else {
      background-color: semantic-color('background', 'disabled');
    }
  }
}

@mixin action-common {
  background-size: 51% 100%;
  background-repeat: no-repeat;
}

@mixin primary-action($state) {
  @include action-common;
  clip-path: polygon(
    0% 14px,
    14px 0%,
    100% 0%,
    100% calc(100% - 14px),
    calc(100% - 14px) 100%,
    0% 100%
  );
  border-radius: 0;
  background-color: semantic-color('background', 'primary');

  position: relative;

  &:hover,
  &:active {
    background-color: semantic-color('background', 'primary-accent');
  }

  &:focus-visible {
    background-color: semantic-color('border', 'accent');

    &::before {
      content: '';
      position: absolute;
      top: 1px;
      left: 1px;
      display: block;
      width: calc(100% - 2px);
      height: calc(100% - 2px);
      background-color: semantic-color('background', 'primary');
      clip-path: inherit;
    }
  }

  @if ($state == 'disabled') {
    @include action-common;
    background-color: semantic-color('background', 'disabled');

    &:hover,
    &:focus,
    &:active {
      background-color: semantic-color('background', 'disabled');
    }
  }
}
// button font, fill, border color 설정
@mixin setColorStyle($type, $state) {
  @if ($type == 'tertiary') {
    @if ($state == 'pressed') {
      border: 1px solid semantic-color('border', 'accent');
    } @else {
      border: 1px solid semantic-color('border', 'default');
    }
    color: semantic-color('text', 'default');
    & svg {
      color: semantic-color('text', 'default');
    }
  } @else if($type == 'error-tertiary') {
    @if ($state == 'pressed') {
      border: 1px solid semantic-color('border', 'error-accent');
      & svg {
        color: semantic-color('text', 'error-accent');
        .path {
          stroke: semantic-color('text', 'error-accent') !important;
        }
      }
    } @else {
      border: 1px solid semantic-color('border', 'error');
      & svg {
        color: semantic-color('text', 'error');
        .path {
          stroke: semantic-color('text', 'error') !important;
        }
      }
    }
    color: semantic-color('text', 'error');
    & svg {
      color: semantic-color('text', 'error');
    }
  } @else if($type == 'ghost') {
    color: semantic-color('text', 'default');
    & svg {
      color: semantic-color('text', 'default');
    }
  } @else {
    color: semantic-color('text', 'default-reverse');
    & svg {
      color: semantic-color('text', 'default-reverse');
    }
  }
  // disabled
  @if ($state == 'disabled') {
    color: semantic-color('text', 'disabled');
    & svg {
      color: semantic-color('text', 'disabled');
    }
    @if ($type == 'text' or $type == 'link') {
      background: none;
    } @else if($type == 'tertiary' or $type == 'error-tertiary') {
      border: 1px solid semantic-color('border', 'disabled');
    }
  }
}

// box button, text button
$buttonType: 'primary', 'secondary', 'tertiary', 'error', 'error-tertiary',
  'text', 'link', 'ghost';
$buttonSize: 'xl', 'l', 'm', 's', 'xs';
$buttonState: 'default', 'pressed', 'disabled', 'error';

@mixin rippleEffect($type) {
  .ripple {
    position: absolute;
    display: block;
    width: 0;
    height: 0;
    transform: scale(0);
    opacity: 0.4;
    animation: ripple-button 0.7s linear;
    @if ($type == 'primary' or $type == 'secondary' or $type == 'error') {
      background-color: semantic-color('text', 'default-reverse');
    } @else if($type == 'error-tertiary') {
      background-color: semantic-color('text', 'error');
    } @else {
      background-color: semantic-color('text', 'default');
    }
  }

  @keyframes ripple-button {
    100% {
      transform: scale(2.5);
      opacity: 0;
    }
  }
}

@mixin buttonCase($type, $size, $state) {
  .mds-button-root.button__#{$type}-#{$size}--#{$state},
  .button__#{$type}-#{$size}--#{$state} {
    @include button-common;

    @if ($type == 'link') {
      @if ($state == 'default') {
        @extend %type-#{$type}-#{$state};
      } @else if($state == 'pressed') {
        @extend %type-#{$type}-#{$state};
      }
    } @else if($type == 'text') {
      @if ($state != 'disabled') {
        @extend %type-#{$type}-#{$state};
      }
    } @else {
      @include setBackgroundColor($type, $state);
      @include setColorStyle($type, $state);
      @extend %size-#{$size};
      @include rippleEffect($type);
    }
    @if ($state == 'disabled') {
      cursor: default;
    }

    &.icon-button {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 2px;

      & img,
      & svg {
        display: block;
        flex: none;

        @if ($size == 'xl' or $size == 'l') {
          width: 24px;
          height: 24px;
        } @else if($size == 'm' or $size == 's') {
          width: 20px;
          height: 20px;
        } @else if($size == 'xs') {
          width: 16px;
          height: 16px;
        }
      }
    }

    &:hover,
    &:focus {
      @if ($state != 'disabled') {
        @if ($type == 'link') {
          @if ($state == 'default' or $state == 'pressed') {
            @extend %type-#{$type}-#{'pressed'};
          }
        } @else if($type == 'text') {
          @if ($state != 'disabled') {
            @extend %type-#{$type}-#{'pressed'};
          }
        } @else {
          @include setBackgroundColor($type, 'pressed');
          @include setColorStyle($type, 'pressed');
        }
      }
    }

    @if ($size == 'xl' and $type == 'primary') {
      &.primary-action {
        @include primary-action($state);
      }
    }

    .spinner-wrap {
      overflow: unset;
      svg {
        color: inherit;
      }
    }
  }
}

// icon button
$iconButtonType: 'primary', 'secondary', 'tertiary', 'error', 'error-tertiary',
  'ghost';
$iconButtonSize: 'xl', 'l', 'm', 's', 'xs';
$iconButtonState: 'default', 'pressed', 'disabled', 'error';

@mixin iconButtonCase($type, $size, $state) {
  .button__icon-#{$type}-#{$size}--#{$state} {
    @include button-common;
    @include rippleEffect($type);
    @include setColorStyle($type, $state);

    display: flex;
    justify-content: center;
    align-items: center;
    gap: 4px;

    @include setBackgroundColor($type, $state);

    &.icon-button {
      & img,
      & svg {
        display: block;

        @if ($size == 'xl' or $size == 'l') {
          width: 24px;
          height: 24px;
        } @else if($size == 'm' or $size == 's') {
          width: 20px;
          height: 20px;
        } @else if($size == 'xs') {
          width: 16px;
          height: 20px;
        }
      }

      &-only {
        min-width: auto;

        & img,
        & svg {
          display: block;
        }

        @if ($size == 'xl') {
          width: 48px;
          height: 48px;
          padding: 10px;

          & img,
          & svg {
            width: 28px;
            height: 28px;
          }
        } @else if($size == 'l') {
          width: 40px;
          height: 40px;
          padding: 6px;

          & img,
          & svg {
            width: 24px;
            height: 24px;
          }
        } @else if($size == 'm') {
          width: 36px;
          height: 36px;
          padding: 8px;

          & img,
          & svg {
            width: 20px;
            height: 20px;
          }
        } @else if($size == 's') {
          width: 32px;
          height: 32px;
          padding: 6px;

          & img,
          & svg {
            width: 20px;
            height: 20px;
          }
        } @else if($size == 'xs') {
          width: 28px;
          height: 28px;
          padding: 4px;

          & img,
          & svg {
            width: 16px;
            height: 16px;
          }
        }
      }

      &:hover,
      &:focus {
        @if ($state != 'disabled') {
          @include setBackgroundColor($type, 'pressed');
          @include setColorStyle($type, 'pressed');
        }
      }
    }
  }
}

@each $type in $buttonType {
  @each $size in $buttonSize {
    @each $state in $buttonState {
      @include buttonCase($type, $size, $state);
    }
  }
}

@each $type in $iconButtonType {
  @each $size in $iconButtonSize {
    @each $state in $iconButtonState {
      @include iconButtonCase($type, $size, $state);
    }
  }
}

.button__group {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  gap: 8px;
  width: 100%;

  &.fullWidth {
    button {
      flex-grow: 1;
      width: 100%;
    }
  }

  &.left {
    justify-content: flex-start;
  }

  &.center {
    justify-content: center;
  }

  &.right {
    justify-content: flex-end;
  }

  &.vertical {
    flex-direction: column;
  }

  &.horizontal {
    flex-direction: row;
  }

  @include media-mobile-m {
    button {
      width: 100%;
    }
  }
}

// size
%size-xl {
  height: 48px;
  padding: 0 16px;
}
%size-l {
  height: 40px;
  padding: 0 16px;
}
%size-m {
  height: 36px;
  padding: 0 12px;
}
%size-s {
  height: 32px;
  padding: 0 12px;
}
%size-xs {
  height: 28px;
  padding: 0 8px;
}

// text type
%type-text-default {
  color: semantic-color('text', 'sub');
  & svg {
    color: semantic-color('text', 'sub');
    .path {
      stroke: semantic-color('text', 'sub') !important;
    }
  }
}
%type-text-pressed {
  color: semantic-color('text', 'default');
  & svg {
    color: semantic-color('text', 'default');
  }
}
%type-text-error {
  color: semantic-color('text', 'error');
  & svg {
    color: semantic-color('text', 'error');
    .path {
      stroke: semantic-color('text', 'error') !important;
    }
  }
}
%type-link-default {
  color: semantic-color('text', 'information');
  & svg {
    color: semantic-color('text', 'information');
    .path {
      stroke: semantic-color('text', 'information') !important;
    }
  }
}
%type-link-pressed {
  position: relative;
  color: semantic-color('text', 'information');

  &::after {
    content: '';
    display: block;
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 1px;
    background-color: semantic-color('text', 'information');
  }
  & svg {
    color: semantic-color('text', 'information');
    .path {
      stroke: semantic-color('text', 'information') !important;
    }
  }
}
