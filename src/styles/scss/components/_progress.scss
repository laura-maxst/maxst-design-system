.mds-progress {
  position: relative;
  display: inline-block;
  height: fit-content;
  font-size: 0;

  .progress__icon {
    color: semantic-color('text', 'disabled');
    fill: semantic-color('text', 'disabled');

    svg {
      width: 100%;
      height: 100%;
    }
  }

  &.mds-linear-progress {
    width: 100%;
    display: flex;
    flex-direction: column;
    // gap: 6px;

    &.bottom {
      flex-direction: column-reverse;
    }

    .linear-progress__info-box {
      display: flex;
      justify-content: flex-end;

      &.has-label {
        justify-content: space-between;
      }
    }
    .linear-progress__box {
      align-items: center;
      height: 20px;

      .progress__line {
        width: 100%;
        background-color: semantic-color('background', '2nd-base');

        .path {
          height: 100%;
          transition: width ease 0.5s;
        }
      }
    }

    &.indeterminate {
      .progress__line {
        position: relative;
        overflow: hidden;

        .path {
          position: absolute;
          left: 0px;
          bottom: 0px;
          top: 0px;
          width: auto;
          transition: transform ease 0.5s;
          transform-origin: left center;
          animation: linear-progress-dash-effect 2s ease-in-out infinite;
        }
      }
    }
  }

  &.mds-circular-progress {
    .font-body.progress__percent {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .progress__icon {
      display: block;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);

      svg {
        width: 100%;
        height: 100%;
      }
    }

    svg.progress__svg {
      position: relative;
      width: 80px;
      height: 80px;
      z-index: 2;
      color: inherit;
      transform: rotate(-90deg);

      circle {
        position: absolute;
        top: 0;
        left: 0;
        stroke: semantic-color('background', '2nd-base');

        &.path {
          stroke-linecap: square;
          transition: stroke-dashoffset ease 0.5s;
        }
      }
    }

    &.indeterminate {
      svg.progress__svg {
        transform: rotate(0);
        animation: rotate 2s linear infinite;
      }
    }
  }
}

$progressType: 'primary', 'secondary', '';
$progressStatus: 'error', 'success', '';
$progressSize: 'l', 'm', 's';

@mixin ProgressCase($type, $status, $size) {
  .progress-#{$type}#{$status}-#{$size} {
    // @if ($type == 'primary') {
    //   .progress__icon {
    //     color: semantic-color('text', 'primary');
    //     fill: semantic-color('text', 'primary');
    //   }
    // } @else if($type == 'secondary') {
    //   .progress__icon {
    //     color: semantic-color('text', 'default');
    //     fill: semantic-color('text', 'default');
    //   }
    // }
    @if ($status == 'error') {
      .progress__icon,
      .progress__icon svg {
        color: semantic-color('text', 'error');
        fill: semantic-color('text', 'error');
      }
    }

    &.finished {
      @if ($status == 'success') {
        .progress__icon,
        .progress__icon svg {
          color: semantic-color('text', 'success');
          fill: semantic-color('text', 'success');
        }
      }
    }

    &.mds-circular-progress {
      @if ($type == 'primary') {
        svg.progress__svg {
          .path {
            stroke: semantic-color('background', 'primary');
          }
        }
      } @else if($type == 'secondary') {
        svg.progress__svg {
          .path {
            stroke: semantic-color('background', 'secondary');
          }
        }
      }

      @if ($status == 'error') {
        svg.progress__svg {
          .path {
            stroke: semantic-color('text', 'error');
          }
        }
      }

      &.finished {
        @if ($status == 'success') {
          svg.progress__svg {
            .path {
              stroke: semantic-color('text', 'success');
            }
          }
        }
      }

      @if ($size == 'l') {
        svg.progress__svg {
          width: 80px;
          height: 80px;
        }
        .progress__icon {
          width: 24px;
          height: 24px;
        }
      } @else if ($size == 'm') {
        svg.progress__svg {
          width: 40px;
          height: 40px;
        }
        .progress__icon {
          width: 20px;
          height: 20px;
        }
      } @else if ($size == 's') {
        svg.progress__svg {
          width: 16px;
          height: 16px;
        }
      }
    }

    &.mds-linear-progress {
      @if ($type == 'primary') {
        .path {
          background-color: semantic-color('background', 'primary');
        }
      } @else if($type == 'secondary') {
        .path {
          background-color: semantic-color('background', 'secondary');
        }
      }

      @if ($status == 'error') {
        .path {
          background-color: semantic-color('text', 'error');
        }
        // .progress__icon {
        //   svg {
        //     color: semantic-color('text', 'error');
        //     fill: semantic-color('text', 'error');
        //   }
        // }
      }

      &.finished {
        @if ($status == 'success') {
          .path {
            background-color: semantic-color('text', 'success');
          }
          // .progress__icon {
          //   svg {
          //     color: semantic-color('text', 'success');
          //     fill: semantic-color('text', 'success');
          //   }
          // }
        }
      }

      @if ($size == 'l') {
        .progress__line {
          height: 8px;
        }
        .progress__icon {
          width: 20px;
          height: 20px;
        }
      } @else if ($size == 'm') {
        .progress__line {
          height: 6px;
        }
        .progress__icon {
          width: 16px;
          height: 16px;
        }
      } @else if ($size == 's') {
        .progress__line {
          height: 4px;
        }
        .progress__icon {
          width: 16px;
          height: 16px;
        }
      }
    }

    &.mds-circular-progress.indeterminate {
      svg.progress__svg {
        .path {
          animation: circle-progress-dash-effect-#{$size} 2s ease-in-out infinite;
        }
      }
    }
  }
}

@each $type in $progressType {
  @each $status in $progressStatus {
    @each $size in $progressSize {
      @include ProgressCase($type, $status, $size);
    }
  }
}
@keyframes linear-progress-dash-effect {
  0% {
    left: -35%;
    right: 100%;
  }
  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
}
@keyframes circle-progress-dash-effect-l {
  0% {
    stroke-dasharray: 1, 400;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 200, 400;
    stroke-dashoffset: -15;
  }
  100% {
    stroke-dasharray: 200, 400;
    stroke-dashoffset: -250;
  }
}
@keyframes circle-progress-dash-effect-m {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 100, 200;
    stroke-dashoffset: -30;
  }
  100% {
    stroke-dasharray: 100, 200;
    stroke-dashoffset: -90;
  }
}
@keyframes circle-progress-dash-effect-s {
  0% {
    stroke-dasharray: 1, 160;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 80, 160;
    stroke-dashoffset: -20;
  }
  100% {
    stroke-dasharray: 80, 160;
    stroke-dashoffset: -45;
  }
}
