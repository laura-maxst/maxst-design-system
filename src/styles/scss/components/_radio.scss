.radio__group {
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  width: 100%;
  flex-wrap: wrap;
  flex-direction: row;
  gap: 8px;

  .radio-box {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    width: 100%;
    flex-wrap: wrap;
    flex-direction: row;
    gap: 16px;
  }

  .radio__group__label {
    width: 100%;
  }

  &.left {
    justify-content: flex-start;
  }

  &.right {
    justify-content: flex-end;

    .radio-box {
      justify-content: flex-end;
    }

    & + .helper-text,
    .radio__group__label {
      text-align: right;
    }
  }

  &.vertical {
    flex-direction: column;
    gap: 4px;

    .radio-box {
      padding-top: 4px;
      flex-direction: column;
      gap: 12px;
    }

    &.right {
      align-items: flex-end;

      .radio-box {
        align-items: flex-end;
        width: max-content;
        align-items: flex-start;
      }
    }
  }

  &.horizontal {
    flex-direction: row;
    gap: 4px;

    .radio-box {
      padding-top: 4px;
      flex-direction: row;
      gap: 16px;
    }
  }

  @include helper-text-with-icon;
}

.radio {
  input[type='radio'] {
    appearance: none;
  }
}

// radio background, border color setting
@mixin radioColorSet($type, $color) {
  @if ($type == 'background') {
    background-color: semantic-color('background', $color);
  } @else if($type == 'border') {
    border-color: semantic-color('border', $color);
  }
}

$radioSize: 'l', 's';
$radioState: 'default', 'pressed', 'disabled', 'error';

@mixin stateDisabled {
  &,
  &:hover,
  &:active,
  &:focus {
    &::after {
      @include radioColorSet('border', 'disabled');
      @include radioColorSet('background', 'disabled');
    }
  }
  & + p {
    color: semantic-color('text', 'disabled');
  }

  &.checked {
    &,
    &:hover,
    &:active,
    &:focus {
      &::after {
        @include radioColorSet('background', 'disabled');
      }
    }
  }
}

.radio-wrap {
  @include helper-text-with-icon;

  .helper-text.font-body {
    padding-top: 4px;
  }

  .radio-label {
    display: flex;
    align-items: center;
    color: semantic-color('text', 'default');
    cursor: pointer;

    .radio {
      position: relative;
      flex: none;
      margin-right: 8px;
      color: semantic-color('text', 'default');

      // radio touch area
      &::before {
        position: absolute;
        content: '';
        display: block;
        width: calc(100% + 16px);
        height: calc(100% + 16px);
        z-index: 0;
      }
    }

    p {
      word-break: break-all;
    }
  }
}

@mixin radioCase($size, $state) {
  .radio__#{$size}--#{$state} {
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;

    &::after {
      position: absolute;
      content: '';
      display: block;
      width: 100%;
      height: 100%;
      border: 1px solid;
      border-radius: 50%;
      box-sizing: border-box;
      z-index: 11;
      @include radioColorSet('border', 'default');
    }

    @if ($size == 'l') {
      width: 24px;
      height: 24px;
    } @else if($size == 's') {
      width: 18px;
      height: 18px;
    }

    &:hover,
    &:active,
    &:focus {
      &::after {
        @include radioColorSet('border', 'accent');
      }
    }

    @if ($state == 'pressed') {
      &::after {
        @include radioColorSet('border', 'accent');
      }
    } @else if($state == 'disabled') {
      @include stateDisabled;
    } @else if($state == 'error') {
      &::after {
        @include radioColorSet('border', 'error');
      }

      &:hover,
      &:active,
      &:focus {
        &::after {
          @include radioColorSet('border', 'error-accent');
        }
      }
    }

    &.checked {
      &::after {
        @include radioColorSet('border', 'primary');
      }

      &:hover,
      &:active,
      &:focus {
        &::after {
          @include radioColorSet('border', 'primary-accent');
        }
      }

      @if ($size == 'l') {
        &::after {
          border-width: 7px;
        }
      } @else if($size == 's') {
        &::after {
          border-width: 6px;
        }
      }

      @if ($state == 'pressed') {
        &::after {
          @include radioColorSet('background', 'primary-accent');
        }
      } @else if($state == 'disabled') {
        @include stateDisabled;
      } @else if($state == 'error') {
        &::after {
          @include radioColorSet('border', 'error');
        }

        &:hover,
        &:active,
        &:focus {
          &::after {
            @include radioColorSet('border', 'error-accent');
          }
        }
      }
    }

    @include helper-text-with-icon;
  }
}

@each $size in $radioSize {
  @each $state in $radioState {
    @include radioCase($size, $state);
  }
}
